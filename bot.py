import json, os, logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
OPERATOR_CHAT_ID = -1002317684716  # ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

# ---------- —á–∏—Ç–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ ----------
with open("catalog.json", encoding="utf-8") as f:
    CATALOG = json.load(f)

def categories_keyboard():
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(cat["cat_name"], callback_data=f"cat_{cat['cat_id']}")] for cat in CATALOG]
    )

def items_keyboard(cat_id: str):
    cat = next(c for c in CATALOG if c["cat_id"] == cat_id)
    return InlineKeyboardMarkup(
        [[InlineKeyboardButton(item["name"], callback_data=f"item_{item['id']}")] for item in cat["items"]]
    )

# ---------- –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
main_menu = ReplyKeyboardMarkup(
    [["üõç –ö–∞—Ç–∞–ª–æ–≥", "üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"], ["üë®‚Äçüíª –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "‚ùì –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å"]],
    resize_keyboard=True
)

# ---------- /getid ----------
async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cid = update.effective_chat.id
    await update.message.reply_text(f"–í–∞—à chat_id: `{cid}`", parse_mode="HTML")

# ---------- /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –∏ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä—ã.\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üõç –ö–∞—Ç–∞–ª–æ–≥¬ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# ---------- —Ç–µ–∫—Å—Ç ----------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = update.message.text.lower()

    if "–∫–∞—Ç–∞–ª–æ–≥" in txt:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard())

    elif "–∏–Ω—Å—Ç—Ä—É–∫" in txt:
        await update.message.reply_text("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://xn----7sbbqqeail6cgq0d.xn--p1ai/faq/")

    elif "—Ç–µ—Ö–ø–æ–¥" in txt or "–æ–ø–µ—Ä–∞—Ç–æ—Ä" in txt:
        # 1) –æ—Ç–≤–µ—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
        await update.message.reply_text("–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

        # 2) —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        user = update.effective_user
        from telegram.error import BadRequest, Forbidden  # ‚Üê –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (—Ä–∞–∑–¥–µ–ª import'–æ–≤)

        ...

        try:
            await context.bot.send_message(
                chat_id=OPERATOR_CHAT_ID,
                text=notify,
                parse_mode="HTML"
            )
        except (BadRequest, Forbidden) as e:
            # —Å—é–¥–∞ –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥ ‚Äî —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø—Ä–∏—á–∏–Ω—É
            logging.warning(f"–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: {e}")

    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=main_menu)

# ---------- –Ω–∞–∂–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ----------
async def category_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cat_id = update.callback_query.data.removeprefix("cat_")
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–¢–æ–≤–∞—Ä—ã:", reply_markup=items_keyboard(cat_id))

# ---------- –Ω–∞–∂–∞–ª–∏ —Ç–æ–≤–∞—Ä ----------
async def item_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    item_id = update.callback_query.data.removeprefix("item_")
    await update.callback_query.answer()
    item = next(i for cat in CATALOG for i in cat["items"] if i["id"] == item_id)

    caption = (
        f"*{item['name']}* ‚Äî {item['price']} ‚ÇΩ\n"
        f"{item['desc']}\n\n"
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–æ–≤–∞—Ä—É."
    )
    await update.callback_query.message.reply_photo(
        photo=item["photo"], caption=caption, parse_mode="Markdown"
    )

# ---------- –∑–∞–ø—É—Å–∫ ----------
def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("getid", get_chat_id))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(CallbackQueryHandler(category_click, pattern=r"^cat_"))
    app.add_handler(CallbackQueryHandler(item_click, pattern=r"^item_"))

    print("Bot is running‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()
